#version 450 core

layout(points) in;
layout(triangle_strip, max_vertices = 4) out;

in float out_zoom[];
in float out_radious[];

out vec2 tex_coords;

void main(){
    vec4 location = gl_in[0].gl_Position;
    vec2 coords = vec2(((location.x + 1.0f)/2.0f), (-(location.y + 1.0f)/2.0f)+1.0f);

    if(location.x>1.0f-out_radious[0]){
        location.x = 1.0f-out_radious[0];
    }
    else if(location.x<-1.0f+out_radious[0]){
        location.x = -1.0f+out_radious[0];
    }
    if(location.y>1.0f-out_radious[0]){
        location.y = 1.0f-out_radious[0];
    }
    else if(location.y<-1.0f+out_radious[0]){
        location.y = -1.0f+out_radious[0];
    }

    float offset = out_radious[0]/2.0f;

    gl_Position = location + vec4(-out_radious[0], -out_radious[0], 0.0f, 0.0f);
    tex_coords = coords + vec2(-offset/out_zoom[0], offset/out_zoom[0]);
    EmitVertex();

    gl_Position = location + vec4(-out_radious[0], out_radious[0], 0.0f, 0.0f);
    tex_coords = coords + vec2(-offset/out_zoom[0], -offset/out_zoom[0]);
    EmitVertex();

    gl_Position = location + vec4(out_radious[0], -out_radious[0], 0.0f, 0.0f);
    tex_coords = coords + vec2(offset/out_zoom[0], offset/out_zoom[0]);
    EmitVertex();

    gl_Position = location + vec4(out_radious[0], out_radious[0], 0.0f, 0.0f);
    tex_coords = coords + vec2(offset/out_zoom[0], -offset/out_zoom[0]);
    EmitVertex();


    EndPrimitive();
}
